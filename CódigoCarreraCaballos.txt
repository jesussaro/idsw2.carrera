import java.util.*;

public class Main {
    public static void main(String[] args) throws Exception {
        Scanner input = new Scanner(System.in);
        System.out.println("Introduce el número de caballos: ");
        int nHorses = input.nextInt();
        Track t = new Track(nHorses);
        
        System.out.println("----------------------------------");
        Game g = new Game(nHorses);

        g.Start();
        t.createTrack();
        


        do{
            System.out.println("----------------------------------");
            int advances = g.Random(nHorses - 1);
            Horse h = g.findHourse(advances);
            h.Go();
            t.HorseAdvances(h.number, h.counter);
            t.showTrack();
            
        }while(input.nextLine() != null && !g.CheckWinner(t));
        System.out.println("");
        System.out.print("Se acabó, ganó el caballo " + g.findWinner().number);
    }
}

class Game{
    
    public Horse[] horsesArr;
    public Track t;
    
    public Game(int nHorses){
        this.horsesArr = new Horse[nHorses];
        for(int i = 0; i < nHorses; i++){
            horsesArr[i] = new Horse(i);
        }
        t = new Track(nHorses);
    }
    
    public void Start(){
        
        for(int i = 0; i < t.lines.length; i++){
            t.lines[i] = new String[10];
        }
    }
    
    public int Random(int nHorses){
        
        double n = Math.random()*(nHorses+1-0)+0;
        return (int) n;
    }
    
    public Horse findHourse(int number){
        Horse result = null;
        for(Horse h : horsesArr){
            if(h.number == number){
                result = h;
            }
        }
        return result;
    }
    
    public boolean CheckWinner(Track t){
        
        for(int i = 0; i < t.lines.length; i++){
            for(int j = 0; j < t.lines[0].length; j++){
                if(t.lines[i][9].equals("[1]")){
                	Horse h = findHourse(i);
                	h.finished = true;
                    return true;
                }
            }
        }
    	return false;
    }
    
    public Horse findWinner(){
        Horse result = null;
        for(Horse h : horsesArr){
            if(h.finished){
                result = h;
            }
        }
        result.number++; 
        return result;
    }
}
class Horse{
    
    public int counter;
    public int number;
    public boolean finished;
    
    public Horse(int number){
        this.counter = 0;
        this.finished = false;
        this.number = number;
    }
    
    public Horse(){}
    
    public void  Go(){
        counter++;
    }
    
}

class Track{
    
    String[][] lines;
    
    public Track(int nLines){
        
        this.lines = new String[nLines][10];
    }
    public void createTrack() {
        for(int i = 0; i < lines.length; i++){
            for(int j = 0; j < lines[0].length; j++){
                lines[i][j] = "[0]";
            }
        }
    }
    
    public void showTrack(){
        for(int i = 0; i < lines.length; i++){
            for(int j = 0; j < lines[0].length; j++){
                System.out.print(lines[i][j]);
            }
            String n = Integer.toString(i + 1);
            System.out.println(" --> Horse " + n );
        }
    }
    
    public void HorseAdvances(int number, int counter){
        lines[number][counter - 1] = "[1]";
    }
}

